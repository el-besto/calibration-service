services:
  web:
    # Build the image from the Dockerfile in the current directory
    build: .
    container_name: calibration_web
    command: >
      sh -ce "echo 'Waiting for DB...' &&
             uv run alembic upgrade head &&
             python scripts/seed_database.py &&
             echo 'Starting app...' &&
             uv run fastapi dev src/drivers/rest/main.py --host '0.0.0.0' &&
             echo 'Open browser to http://localhost:8777'
      "

    environment:
      PYTHONPATH: .
      DATABASE_URL: "postgresql+asyncpg://dev-user:password@postgres:5432/dev_db"

    stdin_open: true  # Keep stdin open for interaction
    tty: true         # Allocate a pseudo-TTY

    # Host the FastAPI application on port 8777
    ports:
      - "8777:8000"
    depends_on:
      postgres:
        condition: service_healthy

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock

  #  source: https://medium.com/@tclaitken/setting-up-a-fastapi-app-with-async-sqlalchemy-2-0-pydantic-v2-e6c540be4308
  postgres:
    image: postgres:16-alpine
    container_name: calibration_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: dev-user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dev_db
    ports:
      - "5777:5432"
    expose:
      - "5777"
    volumes:
      - db-data:/var/lib/postgresql/data:cached
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-dev-user} -d $${POSTGRES_DB:-dev_db} -q" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  test-postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: test-user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: test_db
    ports:
      - "5778:5432" # Use a different port to avoid conflicts with the main database
    expose:
      - "5778" # Exposing the different port for clarity
    volumes:
      - test-db-data:/var/lib/postgresql/data:cached

volumes:
  db-data:
  test-db-data:
