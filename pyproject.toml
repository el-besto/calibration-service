## ######################## ##
## PROJECT CONFIG & SCRIPTS ##
## ######################## ##

[project]
name = "calibration-service"
version = "0.1.0"
description = "This backend service is designed to manage calibrations of a hardware device."
authors = [
    { name = "Angelo Cisneros", email = "el-besto@users.noreply.github.com" }
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.15.2",
    "fastapi[standard]>=0.115.12",
    "fastapi-utils[all]>=0.8.0",
    "loguru>=0.7.3",
    "motor>=3.7.0",
    "python-ulid[pydantic]>=3.0.0",
    "sqlalchemy>=2.0.40",
    "asyncpg>=0.30.0",
    "greenlet>=3.1.1",
    "pydantic>=2.11.1",
    "pydantic-settings>=2.8.1",
    "python-dotenv>=1.1.0",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pyright>=1.1.398",
    "python-dotenv>=1.1.0",
    "ruff>=0.11.2",
    "pytest>=8.3.5",
    "httpx>=0.28.1",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.0.0",
    "pytest-html>=4.1.1",
    "pyperclip>=1.9.0",
    "pytest-mock>=3.14.0",
]

[project.scripts]
## dev workflow scripts
dev = "scripts.bash_runner:run_dev"
format = "scripts.bash_runner:run_format"
lint = "scripts.bash_runner:run_lint"
test = "scripts.bash_runner:run_test"
test_debug = "scripts.bash_runner:run_test_debug"
test_cov = "scripts.bash_runner:run_test_cov"
typecheck = "scripts.bash_runner:run_typecheck"
check = "scripts.bash_runner:run_check"
## database management scripts
db_init = "scripts.bash_runner:run_db_init"
db_migrate = "scripts.bash_runner:run_db_migrate"
db_create = "scripts.bash_runner:run_db_create_migration"
## Add the seed script runner here
seed = "scripts.bash_runner:run_seed"
## setup scripts
setup = "scripts.bash_runner:run_setup"
## dev util scripts
cp_iso = "scripts.bash_runner:copy_iso"
cp_ulid = "scripts.bash_runner:copy_ulid"
cp_uuid = "scripts.bash_runner:copy_uuid"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

## ################### ##
## TOOL CONFIGURATIONS ##
## ################### ##

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
required-version = ">=0.6.0"
package = true

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
typeCheckingMode = "strict"
reportUnusedFunction = "warning"  # Downgrade from error to warning

# External dependencies that don't have type stubs
reportMissingImports = "none"  # Ignore missing imports from external packages
reportUnknownMemberType = "none"  # Ignore unknown member types from external packages
reportUnknownVariableType = "none"  # Ignore unknown variable types from external packages
reportUnknownArgumentType = "none"  # Ignore unknown argument types from external packages
reportUnknownParameterType = "none"  # Ignore unknown parameter types from external packages
reportUntypedFunctionDecorator = "none"  # Ignore untyped function decorators (common in FastAPI)
reportUntypedBaseClass = "none"  # Ignore untyped base class issues

[tool.pyright.overrides]
# Exception handlers are used by FastAPI as decorators
"src/drivers/rest/exception_handlers.py" = { reportUnusedFunction = "none" }


[tool.ruff]
# Exclude auto-generated files and directories
exclude = [
    # Standard excludes for common directories
    ".eggs",
    ".git",
    ".git-rewrite",
    ".github",
    ".idea",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".run",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # Project-specific excludes
    "alembic/versions/*",
]

# Same as Black.
line-length = 88
indent-width = 4
target-version = "py312"
extend-exclude = [
    "alembic/versions/*",
]

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, not tabs.
indent-style = "space"

# Format docstrings according to Google style.
docstring-code-format = true
docstring-code-line-length = "dynamic"

# Line ending configuration
line-ending = "auto"

# Don't respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["B"]

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]

# Never enforce these rules
ignore = [
    "E501",    # line too long - let formatter handle it
    "D107",    # missing docstring in __init__
    "D203",    # one-blank-line-before-class - conflicts with D211
    "D212",    # multi-line-summary-first-line - conflicts with D213
    "D100",    # missing module docstring - too strict
    "ERA001",  # Allow commented-out code
    "F841",    # Allow unused variables in exception handlers
    "COM812",  # missing trailing comma - let formatter handle it
    "TRY003",  # specifying long messages outside the exception class
    # TODO: Re-enable these rules after adding proper documentation
    "D102",    # missing docstring in public method
    # TODO: Re-enable these rules after proper argument handling
    "ARG001",  # unused function argument
    "ARG002",  # Unused method argument
    "TRY300",  # "Consider moving this statement to an `else` block"
]

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for in-memory repos
"src/**/in_memory**" = [
    "PLR0912", # too many branches
]


# Ignore specific rules for test files
"**/tests/**/*" = [
    "S101",    # Use of assert detected
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "PLR2004", # Magic value used in comparison
    "D",       # Ignore documentation-related rules in tests
    "ANN",     # Ignore type annotation rules in tests
]
# Ignore specific rules for __init__.py files
"**/__init__.py" = [
    "F401",  # Unused imports
]
"tests/**/*.py" = [
    "S101",    # Allow "assert" in tests
    "PLR2004", # Allow magic numbers in tests
    "ANN",     # Allow missing type annotations in tests
    "ARG001",  # Allow unused function arguments in tests
    "ARG002",  # Allow unused method arguments in tests
    "PLR0913"  # Allow too many arguments in function definition
]
"**/alembic/**/*" = [
    "T201",    # Allow print statements in scripts
    "RUF100"
]
"scripts/**/*" = [
    "T201",    # Allow print statements in scripts
    "S603",    # Allow subprocess calls
    "S607",    # Allow  starting a process with a partial executable path
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["classmethod", "staticmethod", "property"]

[tool.ruff.lint.isort]
# Group imports into sections: stdlib, third-party, first-party
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["src"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
