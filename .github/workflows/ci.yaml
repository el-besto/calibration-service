name: CI

on:
  push:
    branches: [main]
    paths:
      - "**.py"
      - "pyproject.toml"
      - "pytest.ini"
      - "Dockerfile"
      - "docker-docker-compose.yaml"
      - "scripts/run.sh"
      - ".github/workflows/ci.yaml"
  pull_request:
    paths:
      - "**.py"
      - "pyproject.toml"
      - "pytest.ini"
      - "Dockerfile"
      - "docker-docker-compose.yaml"
      - "scripts/run.sh"
      - ".github/workflows/ci.yaml"
  workflow_dispatch:

concurrency:
  group:
    ${{ github.workflow }}-${{ github.ref_name }}-${{
    github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  python-tests:
    name: "Run python tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv (and Python)
        id: setup-uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          pyproject-file: "pyproject.toml"

      # Create venv and install deps via uv
      - name: Set up virtualenv and install deps
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv sync --frozen --group dev

      - name: Run tests with coverage
        run: ./scripts/run_tests_with_coverage.sh

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: coverage_html/index.html

  build:
    name: "build image"
    runs-on: ubuntu-latest
    # Only build on main branch or when Dockerfile changes
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.changed_files, 'Dockerfile')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: calibration-service:latest
          cache-from: type=gha,scope=calibration-service
          cache-to: type=gha,mode=min,scope=calibration-service
          outputs: type=docker,dest=/tmp/calibration-service.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: calibration-service
          path: /tmp/calibration-service.tar

  container-tests:
    name: "test image"
    runs-on: ubuntu-latest
    needs: [build, python-tests]
    # Only run container tests on main branch or when Dockerfile/compose changes
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'docker-docker-compose.yaml')
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: calibration-service
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/calibration-service.tar
          docker image ls -a

      - name: Start container
        id: run_container
        run: |
          CONTAINER_ID=$(./run.sh -d)
          echo "Container started with ID: $CONTAINER_ID"
          echo "container_id=$CONTAINER_ID" >> $GITHUB_ENV

      - name: Wait for Application to Start
        run: |
          echo "Waiting for application to start..."
          for i in {1..10}; do
            if curl --fail http://localhost:8777; then
              echo "Application is running!"
              exit 0
            fi
            echo "Application is not up yet. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Application failed to start."
          exit 1

      - name: Test Application Health
        run: |
          docker logs $container_id
          curl --fail http://localhost:8777

      - name: Stop Running Container
        run: |
          if [ -n "$container_id" ]; then
            echo "Stopping and removing container $container_id..."
            docker stop $container_id
          else
            echo "No running container to stop."
          fi

      - name: Test Docker compose
        run: |
          docker compose up --detach
          docker compose down
